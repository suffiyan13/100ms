name: Build, Push and Deploy Flask App

# Trigger the workflow when code is pushed to the 'shaik' branch
on:
  push:
    branches:
      - shaik

jobs:
  build:
    runs-on: ubuntu-latest  # Run the job on an Ubuntu runner
    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx for building multi-platform Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password or token

      # Step 4: Build the Docker image of the Flask app
      - name: Build Docker image
        run: |
          docker build -t shaik2024/flask-app:${{ github.sha }} .  # Replace shaik2024 with your Docker Hub username

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push shaik2024/flask-app:${{ github.sha }}  # Replace shaik2024 with your Docker Hub username

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the 'build' job

    steps:
      # Step 6: Checkout the repository again
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 7: Install kubectl (CLI for interacting with Kubernetes)
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo mv kubectl /usr/local/bin/
          sudo chmod +x /usr/local/bin/kubectl

      # Step 8: Install Minikube (local Kubernetes cluster)
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube

      # Step 9: Start Minikube (this will create a local Kubernetes cluster)
      - name: Start Minikube
        run: |
          minikube start --driver=docker

      # Step 10: Configure kubectl to use the Minikube context
      - name: Configure kubectl
        run: |
          kubectl config use-context minikube

      # Step 11: Apply Kubernetes deployment YAML (Flask app deployment)
      - name: Deploy Flask app to Kubernetes
        run: |
          kubectl apply -f deployment/flask-app-deployment.yaml  # Path to your deployment YAML file

      # Step 12: Apply Kubernetes service YAML (Flask app service)
      - name: Deploy Flask service to Kubernetes
        run: |
          kubectl apply -f service/flask-app-service.yaml    # Path to your service YAML file

      # Step 13: Check the status of the deployed pods
      - name: Check deployment status
        run: |
          kubectl get pods

      # Step 14: If deployment fails, send a Slack notification
      - name: Send Slack notification on failure
        if: failure()  # This step is triggered only if previous steps fail
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment failed for Flask app in Kubernetes!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
# Step 15: Get the Minikube IP
      - name: Get Minikube IP
        run: |
          echo "Minikube IP: $(minikube ip)"
          echo "Flask app is accessible at http://$(minikube ip):30001"

      # Step 16: Optional - Add an output with the URL (for reference in your pipeline)
      - name: Set output URL
        id: flask-app-url
        run: |
          echo "::set-output name=url::http://$(minikube ip):30001"

      # Step 17: Show the Flask app URL
      - name: Show Flask app URL
        run: |
          echo "Flask app is available at: http://$(minikube ip):30001"
